// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var jupyter_js_widgets_1 = require("jupyter-js-widgets");
var coreutils_1 = require("@phosphor/coreutils");
var widgets_1 = require("@phosphor/widgets");
var semvercache_1 = require("./semvercache");
var plugin_1 = require("./plugin");
exports.default = plugin_1.default;
/**
 * The token identifying the JupyterLab plugin.
 */
exports.INBWidgetExtension = new coreutils_1.Token('jupyter.extensions.nbWidgetManager');
/**
 * The class name added to an BackboneViewWrapper widget.
 */
var BACKBONEVIEWWRAPPER_CLASS = 'jp-BackboneViewWrapper';
var BackboneViewWrapper = (function (_super) {
    __extends(BackboneViewWrapper, _super);
    /**
     * Construct a new `Backbone` wrapper widget.
     *
     * @param view - The `Backbone.View` instance being wrapped.
     */
    function BackboneViewWrapper(view) {
        var _this = _super.call(this) || this;
        _this._view = null;
        _this._view = view;
        view.on('remove', function () {
            _this.dispose();
        });
        _this.addClass(BACKBONEVIEWWRAPPER_CLASS);
        _this.node.appendChild(view.el);
        return _this;
    }
    BackboneViewWrapper.prototype.onAfterAttach = function (msg) {
        this._view.trigger('displayed');
    };
    BackboneViewWrapper.prototype.dispose = function () {
        this._view = null;
        _super.prototype.dispose.call(this);
    };
    return BackboneViewWrapper;
}(widgets_1.Widget));
exports.BackboneViewWrapper = BackboneViewWrapper;
/**
 * A widget manager that returns phosphor widgets.
 */
var WidgetManager = (function (_super) {
    __extends(WidgetManager, _super);
    function WidgetManager(context, rendermime) {
        var _this = _super.call(this) || this;
        _this._registry = new semvercache_1.SemVerCache();
        _this._context = context;
        _this._rendermime = rendermime;
        context.session.kernelChanged.connect(function (sender, kernel) {
            _this.newKernel(kernel);
        });
        if (context.session.kernel) {
            _this.newKernel(context.session.kernel);
        }
        return _this;
    }
    WidgetManager.prototype.newKernel = function (kernel) {
        var _this = this;
        if (this._commRegistration) {
            this._commRegistration.dispose();
        }
        if (!kernel) {
            return;
        }
        this._commRegistration = kernel.registerCommTarget(this.comm_target_name, function (comm, msg) {
            var oldComm = new jupyter_js_widgets_1.shims.services.Comm(comm);
            _this.handle_comm_open(oldComm, msg);
        });
    };
    ;
    /**
     * Return a phosphor widget representing the view
     */
    WidgetManager.prototype.display_view = function (msg, view, options) {
        var widget = view.pWidget ? view.pWidget : new BackboneViewWrapper(view);
        return Promise.resolve(widget);
    };
    /**
     * Create a comm.
     */
    WidgetManager.prototype._create_comm = function (target_name, model_id, data) {
        var comm = this._context.session.kernel.connectToComm(target_name, model_id);
        comm.open(data);
        return Promise.resolve(new jupyter_js_widgets_1.shims.services.Comm(comm));
    };
    /**
     * Get the currently-registered comms.
     */
    WidgetManager.prototype._get_comm_info = function () {
        return this._context.session.kernel.requestCommInfo({ target: 'jupyter.widget' }).then(function (reply) {
            return reply.content.comms;
        });
    };
    Object.defineProperty(WidgetManager.prototype, "isDisposed", {
        /**
         * Get whether the manager is disposed.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._context === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the resources held by the manager.
     */
    WidgetManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        if (this._commRegistration) {
            this._commRegistration.dispose();
        }
        this._context = null;
    };
    /**
     * Load a class and return a promise to the loaded object.
     */
    WidgetManager.prototype.loadClass = function (className, moduleName, moduleVersion) {
        var mod = this._registry.get(moduleName, moduleVersion);
        if (!mod) {
            return Promise.reject("Module " + moduleName + ", semver range " + moduleVersion + " is not registered as a widget module");
        }
        var cls = mod[className];
        if (!cls) {
            return Promise.reject("Class " + className + " not found in module " + moduleName);
        }
        return Promise.resolve(cls);
    };
    Object.defineProperty(WidgetManager.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetManager.prototype, "rendermime", {
        get: function () {
            return this._rendermime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetManager.prototype, "displayWithOutput", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    WidgetManager.prototype.register = function (data) {
        this._registry.set(data.name, data.version, data.exports);
    };
    return WidgetManager;
}(jupyter_js_widgets_1.ManagerBase));
exports.WidgetManager = WidgetManager;
/**
 * A renderer for widgets.
 */
var WidgetRenderer = (function () {
    function WidgetRenderer(widgetManager) {
        this.mimeTypes = ['application/vnd.jupyter.widget-view+json'];
        this._manager = widgetManager;
    }
    /**
     * Whether the renderer can render given the render options.
     *
     * @param options - The options that would be used to render the data.
     */
    WidgetRenderer.prototype.canRender = function (options) {
        var source = options.model.data.get(options.mimeType);
        var model = this._manager.get_model(source.model_id);
        return model !== void 0;
    };
    /**
     * Whether the renderer will sanitize the data given the render options.
     */
    WidgetRenderer.prototype.wouldSanitize = function (options) {
        return false;
    };
    /**
     * Render the transformed mime data.
     *
     * @param options - The options used to render the data.
     */
    WidgetRenderer.prototype.render = function (options) {
        var _this = this;
        // data is a model id
        var w = new widgets_1.Panel();
        var source = options.model.data.get(options.mimeType);
        var model = this._manager.get_model(source.model_id);
        if (model) {
            model.then(function (model) {
                return _this._manager.display_model(void 0, model, void 0);
            }).then(function (view) {
                w.addWidget(view);
            });
        }
        else {
            // Model doesn't exist
            var error = document.createElement('p');
            error.textContent = 'Widget not found.';
            w.addWidget(new widgets_1.Widget({ node: error }));
        }
        return w;
    };
    Object.defineProperty(WidgetRenderer.prototype, "isDisposed", {
        /**
         * Get whether the manager is disposed.
         *
         * #### Notes
         * This is a read-only property.
         */
        get: function () {
            return this._manager === null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the resources held by the manager.
     */
    WidgetRenderer.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._manager = null;
    };
    return WidgetRenderer;
}());
exports.WidgetRenderer = WidgetRenderer;
