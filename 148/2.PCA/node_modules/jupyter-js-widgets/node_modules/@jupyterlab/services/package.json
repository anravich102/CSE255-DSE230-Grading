{
  "_args": [
    [
      {
        "raw": "@jupyterlab/services@^0.35.0",
        "scope": "@jupyterlab",
        "escapedName": "@jupyterlab%2fservices",
        "name": "@jupyterlab/services",
        "rawSpec": "^0.35.0",
        "spec": ">=0.35.0 <0.36.0",
        "type": "range"
      },
      "/home/nsk/CSE_255/CSE255-DSE230/Classes/2.PCA/node_modules/jupyter-js-widgets"
    ]
  ],
  "_from": "@jupyterlab/services@>=0.35.0 <0.36.0",
  "_id": "@jupyterlab/services@0.35.1",
  "_inCache": true,
  "_location": "/jupyter-js-widgets/@jupyterlab/services",
  "_nodeVersion": "6.9.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/services-0.35.1.tgz_1484139085097_0.2970274284016341"
  },
  "_npmUser": {
    "name": "blink1073",
    "email": "steven.silvester@ieee.org"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@jupyterlab/services@^0.35.0",
    "scope": "@jupyterlab",
    "escapedName": "@jupyterlab%2fservices",
    "name": "@jupyterlab/services",
    "rawSpec": "^0.35.0",
    "spec": ">=0.35.0 <0.36.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jupyter-js-widgets"
  ],
  "_resolved": "https://registry.npmjs.org/@jupyterlab/services/-/services-0.35.1.tgz",
  "_shasum": "9bc0e940b381231cfd3033d8adbe90ca7cafdbf1",
  "_shrinkwrap": null,
  "_spec": "@jupyterlab/services@^0.35.0",
  "_where": "/home/nsk/CSE_255/CSE255-DSE230/Classes/2.PCA/node_modules/jupyter-js-widgets",
  "author": {
    "name": "Project Jupyter"
  },
  "bugs": {
    "url": "https://github.com/jupyterlab/services/issues"
  },
  "dependencies": {
    "@types/minimist": "^1.1.29",
    "minimist": "^1.2.0",
    "path-posix": "^1.0.0",
    "phosphor": "^0.7.0",
    "url": "^0.11.0",
    "url-join": "^1.1.0"
  },
  "description": "Client APIs for the Jupyter services REST APIs",
  "devDependencies": {
    "@types/expect.js": "^0.3.29",
    "@types/mocha": "^2.2.32",
    "@types/requirejs": "^2.1.28",
    "@types/text-encoding": "0.0.30",
    "@types/ws": "0.0.33",
    "expect.js": "^0.3.1",
    "istanbul": "^0.3.18",
    "mocha": "^2.2.5",
    "rimraf": "^2.4.2",
    "text-encoding": "^0.5.2",
    "typedoc": "^0.5.0",
    "typescript": "~2.0.7",
    "webpack": "^1.13.1",
    "ws": "^1.0.1",
    "xmlhttprequest": "^1.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9bc0e940b381231cfd3033d8adbe90ca7cafdbf1",
    "tarball": "https://registry.npmjs.org/@jupyterlab/services/-/services-0.35.1.tgz"
  },
  "files": [
    "lib/**/*.js",
    "lib/**/*.d.ts",
    "lib/*.js",
    "lib/*.d.ts",
    "dist/*.js",
    "dist/**/*.js"
  ],
  "gitHead": "e3a3904cd2acb9167c53151983a0c45c19acce5c",
  "homepage": "https://github.com/jupyterlab/services",
  "keywords": [
    "jupyter",
    "services",
    "notebook"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "blink1073",
      "email": "steven.silvester@ieee.org"
    },
    {
      "name": "ellisonbg",
      "email": "ellisonbg@gmail.com"
    },
    {
      "name": "jasongrout",
      "email": "jason@jasongrout.org"
    }
  ],
  "name": "@jupyterlab/services",
  "optionalDependencies": {},
  "readme": "JupyterLab Services\n===================\n\nJavascript client for the Jupyter services REST APIs\n\n[API Docs](http://jupyterlab.github.io/services/)\n\n[REST API Docs](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml)\n\nNote: All functions and classes using the REST API allow an `ajaxOptions` \nparameter to configure requests.\n\n\nPackage Install\n---------------\n\n**Prerequisites**\n- [node](http://nodejs.org/)\n- [python](https://www.continuum.io/downloads)\n\n```bash\nnpm install --save @jupyterlab/services\nconda install notebook  # notebook 4.2+ required\n```\n\n\nSource Build\n------------\n\n**Prerequisites**\n- [git](http://git-scm.com/)\n- [node 0.12+](http://nodejs.org/)\n- [python](https://www.continuum.io/downloads)\n\n```bash\ngit clone https://github.com/jupyterlab/services.git\ncd services\nnpm install\nnpm run build\nconda install notebook  # notebook 4.2+ required\n```\n\n**Rebuild**\n```bash\nnpm run clean\nnpm run build\n```\n\n\nRun Tests\n---------\n\nFollow the source build instructions first.\n\n```bash\nnpm test\n```\n\n\nBuild Docs\n----------\n\nFollow the source build instructions first.\n\n```bash\nnpm run docs\n```\n\nNavigate to `docs/index.html`.\n\n\nSupported Runtimes\n------------------\n\nThe runtime versions which are currently *known to work* are listed below.\nEarlier versions may also work, but come with no guarantees.\n\n- Node 0.12.7+\n- IE 11+\n- Firefox 32+\n- Chrome 38+\n\nNote: \"requirejs\" must be included in a global context for Comm targets.  \nThis can be as a `<script>` tag in the browser or by using the `requirejs`\npackage in node (`npm install requirejs` and setting \n`global.requirejs = require('requirejs');`).  See the `examples` folder\nfor usage.\n\n\nStarting the Notebook Server\n----------------------------\n\nFollow the package install instructions first.\n\nThe library requires a running Jupyter Notebook server, launched as:\n\n```bash\npython -m notebook --NotebookApp.allow_origin=\"*\"\n```\n\nThe origin can be specified directly instead of using `*` if desired.\n\n\nBundling for the Browser\n------------------------\n\nFollow the package install instructions first.\n\nSee `examples/browser` for an example of using Webpack to bundle the library.\n\nNote: Some browsers (such as IE11), require a polyfill for Promises.\nThe example demonstrates the use of the polyfill.\n\nUsage from Node.js\n------------------\n\nFollow the package install instructions first.\n\n```bash\nnpm install --save xmlhttprequest ws\n```\n\nOverride the global `XMLHttpRequest` and `WebSocket` (in ES6 syntax):\n\n```typescript\nimport { XMLHttpRequest } from \"xmlhttprequest\";\nimport { default as WebSocket } from 'ws';\n\nglobal.XMLHttpRequest = XMLHttpRequest;\nglobal.WebSocket = WebSocket;\n```\n\nSee `examples/node` for an example of using an ES5 node script.\n\n\nUsage Examples\n--------------\n\n**Note:** This module is fully compatible with Node/Babel/ES6/ES5. The\nexamples below are written in TypeScript using ES6 syntax.  Simply\nomit the type declarations when using a language other than TypeScript.\nA translator such as Babel can be used to convert from ES6 -> ES5.\n\n**Kernel**\n\n```typescript\nimport {\n  KernelMessage, Kernel\n} from '@jupyterlab/services';\n\n// The base url of the notebook server.\nconst BASE_URL = 'http://localhost:8000';\n\n\n// Get a list of available kernels and connect to one.\nKernel.listRunning({ baseUrl: BASE_URL }).then(kernelModels => {\n  let options: Kernel.IOptions = {\n    baseUrl: BASE_URL,\n    name: kernelModels[0].name\n  };\n  Kernel.connectTo(kernelModels[0].id, options).then((kernel) => {\n    console.log(kernel.name);\n  });\n});\n\n\n// Get info about the available kernels and start a new one.\nKernel.getSpecs({ baseUrl: BASE_URL }).then(kernelSpecs => {\n  console.log('Default spec:', kernelSpecs.default);\n  console.log('Available specs', Object.keys(kernelSpecs.kernelspecs));\n  // use the default name\n  let options: Kernel.IOptions = {\n    baseUrl: BASE_URL,\n    name: kernelSpecs.default\n  };\n  Kernel.startNew(options).then(kernel => {\n    // Execute and handle replies.\n    let future = kernel.requestExecute({ code: 'a = 1' } );\n    future.onDone = () => {\n      console.log('Future is fulfilled');\n    };\n    future.onIOPub = (msg) => {\n      console.log(msg.content);  // Print rich output data.\n    };\n\n    // Restart the kernel and then send an inspect message.\n    kernel.restart().then(() => {\n      let request: KernelMessage.IInspectRequest = {\n        code: 'hello', cursor_pos: 4, detail_level: 0\n      };\n      kernel.requestInspect(request).then(reply => {\n        console.log(reply.content.data);\n      });\n    });\n\n    // Interrupt the kernel and then send a complete message.\n    kernel.interrupt().then(() => {\n      kernel.requestComplete({ code: 'impor', cursor_pos: 4 } ).then((reply) => {\n        console.log(reply.content.matches);\n      });\n    });\n\n    // Register a callback for when the kernel changes state.\n    kernel.statusChanged.connect((status) => {\n      console.log('status', status);\n    });\n\n    // Kill the kernel.\n    kernel.shutdown().then(() => {\n      console.log('Kernel shut down');\n    });\n  });\n});\n```\n\n**Session**\n\n```typescript\nimport {\n  Session\n} from '@jupyterlab/services';\n\n\n// The base url of the Jupyter server.\nconst BASE_URL = 'http://localhost:8000';\n\n\n// Get a list of available sessions and connect to one.\nSession.listRunning({ baseUrl: BASE_URL }).then(sessionModels => {\n  let options = {\n    baseUrl: BASE_URL,\n    kernelName: sessionModels[0].kernel.name,\n    path: sessionModels[0].notebook.path\n  };\n  Session.connectTo(sessionModels[0].id, options).then((session) => {\n    console.log(session.kernel.name);\n  });\n});\n\n// Start a new session.\nlet options = {\n  baseUrl: BASE_URL,\n  kernelName: 'python',\n  path: '/tmp/foo.ipynb'\n};\n\nSession.startNew(options).then(session => {\n  // Execute and handle replies on the kernel.\n  let future = session.kernel.requestExecute({ code: 'a = 1' });\n  future.onDone = () => {\n    console.log('Future is fulfilled');\n  };\n\n  // Rename the session.\n  session.rename('/local/bar.ipynb').then(() => {\n    console.log('Session renamed to', session.path);\n  });\n\n  // Register a callback for when the session dies.\n  session.terminated.connect(() => {\n    console.log('session died');\n  });\n\n  // Kill the session.\n  session.shutdown().then(() => {\n    console.log('session closed');\n  });\n\n});\n\n```\n\n**Comm**\n\n```typescript\n// The base url of the Jupyter server.\nconst BASE_URL = 'http://localhost:8000';\n\n\n// Create a comm from the server side.\n//\n// Get info about the available kernels and connect to one.\nKernel.getSpecs({ baseUrl: BASE_URL }).then(kernelSpecs => {\n  return Kernel.startNew({\n    baseUrl: BASE_URL,\n    name: kernelSpecs.default,\n  });\n}).then(kernel => {\n  let comm = kernel.connectToComm('test');\n  comm.open('initial state');\n  comm.send('test');\n  comm.close('bye');\n});\n\n// Create a comm from the client side.\nKernel.getSpecs({ baseUrl: BASE_URL }).then(kernelSpecs => {\n  return Kernel.startNew({\n    baseUrl: BASE_URL,\n    name: kernelSpecs.default,\n  });\n}).then(kernel => {\n  kernel.registerCommTarget('test2', (comm, commMsg) => {\n    if (commMsg.content.target_name !== 'test2') {\n       return;\n    }\n    comm.onMsg = (msg) => {\n      console.log(msg);  // 'hello'\n    };\n    comm.onClose = (msg) => {\n      console.log(msg);  // 'bye'\n    };\n  });\n\n  let code = [\n    'from ipykernel.comm import Comm',\n    'comm = Comm(target_name=\"test2\")',\n    'comm.send(data=\"hello\")',\n    'comm.close(data=\"bye\")'\n  ].join('\\n');\n  kernel.requestExecute({ code: code });\n});\n```\n\n**Contents**\n\n```typescript\nimport {\n  ContentsManager\n} from '@jupyterlab/services';\n\n// The base url of the Jupyter server.\nlet baseUrl = 'http://localhost:8000';\n\n\nlet contents = new ContentsManager({ baseUrl });\n\n// Create a new python file.\ncontents.newUntitled({ path: '/foo', type: 'file', ext: 'py' }).then(\n  (model) => {\n    console.log('new file:', model.path);\n  }\n);\n\n// Get the contents of a directory.\ncontents.get('/foo/bar').then(\n  (model) => {\n    console.log('files:', model.content);\n  }\n);\n\n// Rename a file.\ncontents.rename('/foo/bar.txt', '/foo/baz.txt');\n\n// Save a file.\ncontents.save('/foo/test.ipynb');\n\n// Delete a file.\ncontents.delete('/foo/bar.txt');\n\n// Copy a file.\ncontents.copy('/foo/bar.txt', '/baz').then((model) => {\n    console.log('new path', model.path);\n});\n\n// Create a checkpoint.\ncontents.createCheckpoint('/foo/bar.ipynb').then((model) => {\n  let checkpoint = model;\n\n  // Restore a checkpoint.\n  contents.restoreCheckpoint('/foo/bar.ipynb', checkpoint.id);\n\n  // Delete a checkpoint.\n  contents.deleteCheckpoint('/foo/bar.ipynb', checkpoint.id);\n});\n\n// List checkpoints for a file.\ncontents.listCheckpoints('/foo/bar.txt').then((models) => {\n    console.log(models[0].id);\n});\n```\n\n**Configuration**\n\n```typescript\nimport {\n  ConfigWithDefaults, ConfigSection\n} from '@jupyterlab/services';\n\n// The base url of the Jupyter server.\nlet baseUrl = 'http://localhost:8000';\n\nConfigSection.create({ name: 'notebook', baseUrl }).then(section => {\n  let config = new ConfigWithDefaults({\n    section,\n    defaults: { default_cell_type: 'code' },\n    className: 'Notebook'\n  });\n  console.log(config.get('default_cell_type'));   // 'code'\n  config.set('foo', 'bar').then(data => {\n     console.log(data); // \"{ 'foo': 'bar' }\"\n  });\n});\n```\n\n**Terminals**\n\n```typescript\nimport {\n  TerminalSession\n} from '@jupyterlab/services';\n\n\n// Create a named terminal session and send some data.\nTerminalSession.startNew().then(session => {\n  session.send({ type: 'stdin', content: ['foo'] });\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jupyter/jupyter-js-services.git"
  },
  "scripts": {
    "build": "npm run build:src && npm run build:test",
    "build:examples": "npm run example:browser && npm run example:node",
    "build:src": "tsc --project src",
    "build:test": "tsc --project test/src",
    "clean": "rimraf docs && rimraf lib && rimraf test/build && rimraf test/coverage",
    "docs": "typedoc --mode file --module commonjs --excludeNotExported --target es5 --moduleResolution node --out docs/ src",
    "example:browser": "cd examples/browser && npm run update && npm run build",
    "example:node": "cd examples/node && npm install",
    "prepublish": "npm run build && webpack",
    "test": "mocha --retries 3 test/build/**/*.spec.js --foo bar --terminalsAvailable True",
    "test:coverage": "istanbul cover --dir test/coverage _mocha -- --retries 3 test/build/**/*.spec.js --foo bar --terminalsAvailable True",
    "test:debug": "mocha test/build/**/*.spec.js --foo bar --terminalsAvailable True --debug-brk",
    "test:devtool": "devtool node_modules/mocha/bin/_mocha -qc test/build/**/**.spec.js --foo bar --terminalsAvailable True",
    "test:integration": "cd test && python integration_test.py"
  },
  "typings": "lib/index.d.ts",
  "version": "0.35.1"
}
